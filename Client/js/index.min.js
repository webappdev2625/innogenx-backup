"use strict";
import lozad from "lozad";
var map,
  longitude,
  latitude,
  evtListeners = [],
  gvBusy = !1,
  g = [];
const observer = lozad();
function elem(e) {
  return "object" == typeof e ? e : document.getElementById(e);
}
function addEventListeners() {
  let e = !1;
  try {
    let t = Object.defineProperty({}, "passive", {
      get: function () {
        e = !0;
      },
    });
    window.addEventListener("testPassive", null, t),
      window.removeEventListener("testPassive", null, t);
  } catch (e) {}
  if (0 == evtListeners.length) {
    evtListeners = [
      "touchstart",
      "pointerdown",
      "MSPointerDown",
      "mousedown",
      "mouseover",
      "touchmove",
      "pointermove",
      "MSPointerMove",
      "mousemove",
      "touchend",
      "pointerup",
      "MSPointerUp",
      "mouseup",
      "touchcancel",
      "pointercancel",
      "MSPointerCancel",
      "mousecancel",
      "wheel",
      "DOMMouseScroll",
      "mousewheel",
      "volumechange",
      "keydown",
      "keyup",
      "change",
      "beforeunload",
      "popstate",
      "focus",
      "blur",
      "orientationchange",
      "resize",
      "scroll",
    ];
    for (const t of evtListeners)
      elem("root").addEventListener(
        t,
        function (e) {
          eventHandler(e);
        },
        !!e && { passive: !0 }
      );
    elem("root").addEventListener("click", function (e) {
      clickHandler(e);
    });
  }
}
function eventHandler(e) {
  gvBusy || e.type;
}
function picVidSlide(e, t, n = 0) {
  let o;
  switch (n) {
    case 0:
      o = "vw";
      break;
    case 1:
      o = "px";
      break;
    case 2:
      o = "%";
  }
  e.style.webkitTransform =
    e.style.msTransform =
    e.style.MozTransform =
    e.style.OTransform =
    e.style.transform =
      "translateX(" + t + o + ")";
}
function elementTransition(e, t = "300ms") {
  e.style.webkitTransitionDuration =
    e.style.MozTransitionDuration =
    e.style.msTransitionDuration =
    e.style.OTransitionDuration =
    e.style.transitionDuration =
      t;
}
function clickHandler(e) {
  let t;
  switch (e.target.id) {
    case "prevBanner":
      showPrevSlide(elem("banner"), 100, "bannerOffset", "bannerMaxOffset");
      break;
    case "nextBanner":
      showNextSlide(elem("banner"), -100, "bannerOffset", "bannerMaxOffset");
      break;
    case "prevOffer":
      // (t = screen.width > 768 ? 60 : 100),
      // t = elem("offer").clientWidth / 2;
      showPrevSlide(elem("offer"), 1, "offerOffset", "offerMaxOffset", 1);
      break;
    case "nextOffer":
      // (t = screen.width > 768 ? -60 : -100),
      // t = -elem("offer").clientWidth / 2;
      showNextSlide(elem("offer"), -1, "offerOffset", "offerMaxOffset", 1);
      break;
    case "prevTestimonial":
      showPrevSlide(
        elem("testimonial"),
        100,
        "testimonialOffset",
        "testimonialMaxOffset"
      );
      break;
    case "nextTestimonial":
      showNextSlide(
        elem("testimonial"),
        -100,
        "testimonialOffset",
        "testimonialMaxOffset"
      );
  }
}
function showPrevSlide(e, t, n, o, type = 0) {
  let x;
  0 != g[n] ? (g[n] += t) : (e.style.left = g[n] = g[o]);
  elementTransition(e);
  if (n == "offerOffset") x = g[n] * elem("offer").children[0].clientWidth;
  else x = g[n];
  picVidSlide(e, x, type);
}
function showNextSlide(e, t, n, o, type = 0) {
  let x;
  g[n] != g[o] ? (g[n] += t) : (e.style.left = g[n] = 0);
  elementTransition(e);
  if (n == "offerOffset") x = g[n] * elem("offer").children[0].clientWidth;
  else x = g[n];
  picVidSlide(e, x, type);
}
observer.observe(),
  (g.bannerOffset = 0),
  (g.bannerMaxOffset = -300),
  (g.offerOffset = 0),
  (g.testimonialOffset = 0),
  (g.offerMaxOffset = -1),
  (g.testimonialMaxOffset = -100),
  (window.onload = function () {
    (elem("copyright").textContent =
      "Â©" + new Date().getFullYear() + " - Genius Phone Repair"),
      addEventListeners(),
      setTimeout(() => {}, 3e3);
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker
        .register("/service-worker.js")
        .then((registration) => {
          console.log("SW registered: ", registration);
        })
        .catch((registrationError) => {
          console.log("SW registration failed: ", registrationError);
        });
    }
  });
var options = { enableHighAccuracy: !0, timeout: 5e3, maximumAge: 0 };
function success(e) {
  var t = e.coords;
  (latitude = t.latitude),
    (longitude = t.longitude),
    (map = new google.maps.Map(document.getElementById("map"), {
      center: { lat: latitude, lng: longitude },
      zoom: 14,
    }));
}
function error(e) {
  document.getElementById("map").textContent =
    "ERROR(" + e.code + "): " + e.message;
}
function initMap() {
  navigator.geolocation.getCurrentPosition(success, error);
}
function importGoogleMap() {
  loadJS(
    "https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap"
  );
}
function loadJS(e) {
  let t = document.createElement("script");
  (t.src = e), document.head.appendChild(t);
}
function ajsParams(e) {
  let t = "";
  for (let [n, o] of Object.entries(e))
    Array.isArray(o) || "object" == typeof o
      ? (t += "&" + n + "=" + encodeURIComponent(JSON.stringify(o)))
      : (t += "&" + n + "=" + encodeURIComponent(o));
  return (t = t.slice(1));
}
function ajs(e, t, n, o, r, s) {
  let a,
    i = "";
  try {
    a = new XMLHttpRequest();
  } catch (e) {
    try {
      a = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (t) {
      try {
        a = new ActiveXObject("Microsoft.XMLHTTP");
      } catch (n) {
        return void err([e, t, n]);
      }
    }
  }
  (a.onreadystatechange = async () => {
    try {
      4 === a.readyState && 200 === a.status
        ? (a.responseText && ((i = JSON.parse(a.responseText)).e || err(i.e)),
          await r(i))
        : 4 === a.readyState &&
          (console.error(i.responseText), err(i.responseText));
    } catch (e) {
      console.error(e), err(e);
    }
  }),
    a.open(t, n, !0),
    "POST" == t &&
      (a.setRequestHeader("X-Requested-With", "XMLHttpRequest"),
      "x" == e
        ? a.setRequestHeader("Process-Data", !1)
        : a.setRequestHeader(
            "Content-Type",
            "application/x-www-form-urlencoded"
          )),
    a.send(o);
}
function err(e) {
  let t = "";
  switch (Array.isArray(e) ? "array" : typeof e) {
    case "array":
      for (const n of e) t += n + " ";
      showError(t);
      break;
    case "object":
      for (const [n, o] of Object.entries(e)) t += n + ": " + o + " ";
      showError(t);
      break;
    case "string":
      showError(e);
  }
}
